;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 3.0.0
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.


;;;SWIG wrapper code starts here
(in-package #:rman)

(cl:defmacro defanonenum (cl:&body enums)
   "Converts anonymous enums to defconstants."
  `(cl:progn ,@(cl:loop for value in enums
                        for index = 0 then (cl:1+ index)
                        when (cl:listp value) do (cl:setf index (cl:second value)
                                                          value (cl:first value))
                        collect `(cl:defconstant ,value ,index))))

(cl:eval-when (:compile-toplevel :load-toplevel)
  (cl:unless (cl:fboundp 'swig-lispify)
    (cl:defun swig-lispify (name flag cl:&optional (package cl:*package*))
      (cl:labels ((helper (lst last rest cl:&aux (c (cl:car lst)))
                    (cl:cond
                      ((cl:null lst)
                       rest)
                      ((cl:upper-case-p c)
                       (helper (cl:cdr lst) 'upper
                               (cl:case last
                                 ((lower digit) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:lower-case-p c)
                       (helper (cl:cdr lst) 'lower (cl:cons (cl:char-upcase c) rest)))
                      ((cl:digit-char-p c)
                       (helper (cl:cdr lst) 'digit 
                               (cl:case last
                                 ((upper lower) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:char-equal c #\_)
                       (helper (cl:cdr lst) '_ (cl:cons #\- rest)))
                      (cl:t
                       (cl:error "Invalid character: ~A" c)))))
        (cl:let ((fix (cl:case flag
                        ((constant enumvalue) "+")
                        (variable "*")
                        (cl:t ""))))
          (cl:intern
           (cl:concatenate
            'cl:string
            fix
            (cl:nreverse (helper (cl:concatenate 'cl:list name) cl:nil cl:nil))
            fix)
           package))))))


(eval-when (:compile-toplevel :load-toplevel)
  (defun symbol-append (&rest symbols)
    (intern (apply #'concatenate 'string 
                   (mapcar #'symbol-name symbols)))))

(defun null-wrap (fname &rest args)
  (apply fname (append args (list '(:Pointer 0)))))

(defmacro null-wrapper (fname fnamei &rest args)
  (eval-when (:compile-toplevel :load-toplevel :execute)
    
    (if (eq (lastcar args) '&rest)
        `(defmacro ,fname (,@args)
           (,fnamei ,@args :Pointer 0)))))


(defmacro null-wrapped (name-and-options return-type &body args)
  (let* ((name-string (car name-and-options))
         (lisp-name (cadr name-and-options))
         (lisp-internal-name (symbol-append lisp-name 'Internal))
         (new-name-and-options (list name-string lisp-internal-name)))

  `(cffi:defcfun ,new-name-and-options ,return-type ,@args)
))


;; (defmacro null-wrapped-rest (name-and-options return-type &body args)
  
;;     (let* ((name-string (car name-and-options))
;;            (lisp-name (cadr name-and-options))
;;            (lisp-internal-name (symbol-append lisp-name 'Internal))
;;            (new-name-and-options (list name-string lisp-internal-name))
;;            (untyped-vars (mapcar #'car args)))
;;       (cffi:defcfun ,new-name-and-options ,return-type ,@args &rest)
;;       (defmacro ,lisp-name (,@untyped-vars &rest ra)
;;         `(apply ,,lisp-internal-name (list ,,@untyped-vars ,@ra :Pointer 0)))))


  ;; "Defines a Lisp function that calls a foreign function and appends RI_NULL to the end"
  ;; (eval-when (:compile-toplevel :load-toplevel :execute)
  ;;   (let* ((name-string (car name-and-options))
  ;;          (lisp-name (cadr name-and-options))
  ;;          (lisp-internal-name (symbol-append lisp-name 'Internal))
  ;;          (new-name-and-options (list name-string lisp-internal-name)))
  ;;     `(progn
  ;;        (defcfun (quote ,new-name-and-options) ,return-type ,@args)
  ;;        (defmacro ,lisp-name ( ,@(mapcar #'cons ,args) &rest args)
  ;;          `(apply ,lisp-internal-name (append ,args (list '(:Pointer 0)))))))))

;; (defmacro RiSphere (r zmi zma what &rest args)
;;   (apply RiSphereInternal (append (list r zmi zma what) args (list '(:Pointer 0)))))


  ;; (let ((docstring (when (stringp (car args)) (pop args))))
  ;;   (multiple-value-bind (lisp-name foreign-name options)
  ;;       (parse-name-and-options name-and-options)
  ;;     (if (eq (lastcar args) '&rest)
  ;;         (progn
  ;;           (%defcfun-varargs (symbol-append lisp-name 'Internal) foreign-name return-type
  ;;                             (butlast args) options docstring)
  ;;           `(null-wrapper lisp-name ,@(butlast args)))
  ;;       (%defcfun lisp-name foreign-name return-type args options
  ;;                 docstring)))))

;;;SWIG wrapper code ends here

;; (defmacro null-wrapper (fname &rest args)
;;   (eval-when (:compile-toplevel :load-toplevel)
;;     (flet ((symbol-append (&rest symbols)
;;                           (intern (apply #'concatenate 'string 
;;                                          (mapcar #'symbol-name symbols)))))
;;       (let ((args2 (gensym))
;;             (fnamei (symbol-append fname 'Internal)))

;;         `(defmacro ,fname (,@args &rest args2)
;;            `(,,fnamei ,,@args ,@args2 :Pointer (RI_NULL)))))))


(cl:defconstant RI_FALSE 0)

(cl:defconstant RI_TRUE 1)

(cl:defconstant RI_INFINITY 1.0d38)

(cl:defconstant RI_EPSILON 1.0d-10)

(defun RI_NULL () :Pointer (cffi:null-pointer))

(cffi:defcvar ("RI_FRAMEBUFFER" RI_FRAMEBUFFER)
 :string)

(cffi:defcvar ("RI_FILE" RI_FILE)
 :string)

(cffi:defcvar ("RI_ZFILE" RI_ZFILE)
 :string)

(cffi:defcvar ("RI_RGB" RI_RGB)
 :string)

(cffi:defcvar ("RI_RGBA" RI_RGBA)
 :string)

(cffi:defcvar ("RI_RGBZ" RI_RGBZ)
 :string)

(cffi:defcvar ("RI_RGBAZ" RI_RGBAZ)
 :string)

(cffi:defcvar ("RI_A" RI_A)
 :string)

(cffi:defcvar ("RI_Z" RI_Z)
 :string)

(cffi:defcvar ("RI_AZ" RI_AZ)
 :string)

(cffi:defcvar ("RI_PERSPECTIVE" RI_PERSPECTIVE)
 :string)

(cffi:defcvar ("RI_ORTHOGRAPHIC" RI_ORTHOGRAPHIC)
 :string)

(cffi:defcvar ("RI_HIDDEN" RI_HIDDEN)
 :string)

(cffi:defcvar ("RI_PAINT" RI_PAINT)
 :string)

(cffi:defcvar ("RI_RAYTRACE" RI_RAYTRACE)
 :string)

(cffi:defcvar ("RI_PHOTON" RI_PHOTON)
 :string)

(cffi:defcvar ("RI_CONSTANT" RI_CONSTANT)
 :string)

(cffi:defcvar ("RI_SMOOTH" RI_SMOOTH)
 :string)

(cffi:defcvar ("RI_FLATNESS" RI_FLATNESS)
 :string)

(cffi:defcvar ("RI_FOV" RI_FOV)
 :string)

(cffi:defcvar ("RI_AMBIENTLIGHT" RI_AMBIENTLIGHT)
 :string)

(cffi:defcvar ("RI_POINTLIGHT" RI_POINTLIGHT)
 :string)

(cffi:defcvar ("RI_DISTANTLIGHT" RI_DISTANTLIGHT)
 :string)

(cffi:defcvar ("RI_SPOTLIGHT" RI_SPOTLIGHT)
 :string)

(cffi:defcvar ("RI_INTENSITY" RI_INTENSITY)
 :string)

(cffi:defcvar ("RI_LIGHTCOLOR" RI_LIGHTCOLOR)
 :string)

(cffi:defcvar ("RI_FROM" RI_FROM)
 :string)

(cffi:defcvar ("RI_TO" RI_TO)
 :string)

(cffi:defcvar ("RI_CONEANGLE" RI_CONEANGLE)
 :string)

(cffi:defcvar ("RI_CONEDELTAANGLE" RI_CONEDELTAANGLE)
 :string)

(cffi:defcvar ("RI_BEAMDISTRIBUTION" RI_BEAMDISTRIBUTION)
 :string)

(cffi:defcvar ("RI_MATTE" RI_MATTE)
 :string)

(cffi:defcvar ("RI_METAL" RI_METAL)
 :string)

(cffi:defcvar ("RI_SHINYMETAL" RI_SHINYMETAL)
 :string)

(cffi:defcvar ("RI_PLASTIC" RI_PLASTIC)
 :string)

(cffi:defcvar ("RI_PAINTEDPLASTIC" RI_PAINTEDPLASTIC)
 :string)

(cffi:defcvar ("RI_KA" RI_KA)
 :string)

(cffi:defcvar ("RI_KD" RI_KD)
 :string)

(cffi:defcvar ("RI_KS" RI_KS)
 :string)

(cffi:defcvar ("RI_ROUGHNESS" RI_ROUGHNESS)
 :string)

(cffi:defcvar ("RI_KR" RI_KR)
 :string)

(cffi:defcvar ("RI_TEXTURENAME" RI_TEXTURENAME)
 :string)

(cffi:defcvar ("RI_SPECULARCOLOR" RI_SPECULARCOLOR)
 :string)

(cffi:defcvar ("RI_DEPTHCUE" RI_DEPTHCUE)
 :string)

(cffi:defcvar ("RI_FOG" RI_FOG)
 :string)

(cffi:defcvar ("RI_BUMPY" RI_BUMPY)
 :string)

(cffi:defcvar ("RI_MINDISTANCE" RI_MINDISTANCE)
 :string)

(cffi:defcvar ("RI_MAXDISTANCE" RI_MAXDISTANCE)
 :string)

(cffi:defcvar ("RI_BACKGROUND" RI_BACKGROUND)
 :string)

(cffi:defcvar ("RI_DISTANCE" RI_DISTANCE)
 :string)

(cffi:defcvar ("RI_AMPLITUDE" RI_AMPLITUDE)
 :string)

(cffi:defcvar ("RI_RASTER" RI_RASTER)
 :string)

(cffi:defcvar ("RI_SCREEN" RI_SCREEN)
 :string)

(cffi:defcvar ("RI_CAMERA" RI_CAMERA)
 :string)

(cffi:defcvar ("RI_WORLD" RI_WORLD)
 :string)

(cffi:defcvar ("RI_OBJECT" RI_OBJECT)
 :string)

(cffi:defcvar ("RI_INSIDE" RI_INSIDE)
 :string)

(cffi:defcvar ("RI_OUTSIDE" RI_OUTSIDE)
 :string)

(cffi:defcvar ("RI_LH" RI_LH)
 :string)

(cffi:defcvar ("RI_RH" RI_RH)
 :string)

(cffi:defcvar ("RI_P" RI_P)
 :string)

(cffi:defcvar ("RI_PZ" RI_PZ)
 :string)

(cffi:defcvar ("RI_PW" RI_PW)
 :string)

(cffi:defcvar ("RI_N" RI_N)
 :string)

(cffi:defcvar ("RI_NP" RI_NP)
 :string)

(cffi:defcvar ("RI_CS" RI_CS)
 :string)

(cffi:defcvar ("RI_OS" RI_OS)
 :string)

(cffi:defcvar ("RI_S" RI_S)
 :string)

(cffi:defcvar ("RI_T" RI_T)
 :string)

(cffi:defcvar ("RI_ST" RI_ST)
 :string)

(cffi:defcvar ("RI_BILINEAR" RI_BILINEAR)
 :string)

(cffi:defcvar ("RI_BICUBIC" RI_BICUBIC)
 :string)

(cffi:defcvar ("RI_PRIMITIVE" RI_PRIMITIVE)
 :string)

(cffi:defcvar ("RI_INTERSECTION" RI_INTERSECTION)
 :string)

(cffi:defcvar ("RI_UNION" RI_UNION)
 :string)

(cffi:defcvar ("RI_DIFFERENCE" RI_DIFFERENCE)
 :string)

(cffi:defcvar ("RI_PERIODIC" RI_PERIODIC)
 :string)

(cffi:defcvar ("RI_NONPERIODIC" RI_NONPERIODIC)
 :string)

(cffi:defcvar ("RI_CLAMP" RI_CLAMP)
 :string)

(cffi:defcvar ("RI_BLACK" RI_BLACK)
 :string)

(cffi:defcvar ("RI_IGNORE" RI_IGNORE)
 :string)

(cffi:defcvar ("RI_PRINT" RI_PRINT)
 :string)

(cffi:defcvar ("RI_ABORT" RI_ABORT)
 :string)

(cffi:defcvar ("RI_HANDLER" RI_HANDLER)
 :string)

(cffi:defcvar ("RI_BOUNDS" RI_BOUNDS)
 :string)

(cffi:defcvar ("RI_LIMITS" RI_LIMITS)
 :string)

(cffi:defcvar ("RI_SHADOW" RI_SHADOW)
 :string)

(cffi:defcvar ("RI_BIAS0" RI_BIAS0)
 :string)

(cffi:defcvar ("RI_BIAS1" RI_BIAS1)
 :string)

(cffi:defcvar ("RI_SAMPLE" RI_SAMPLE)
 :string)

(cffi:defcvar ("RI_SEARCHPATH" RI_SEARCHPATH)
 :string)

(cffi:defcvar ("RI_SHADER" RI_SHADER)
 :string)

(cffi:defcvar ("RI_TEXTURE" RI_TEXTURE)
 :string)

(cffi:defcvar ("RI_DISPLAY" RI_DISPLAY)
 :string)

(cffi:defcvar ("RI_WIDTH" RI_WIDTH)
 :string)

(cffi:defcvar ("RI_CONSTANTWIDTH" RI_CONSTANTWIDTH)
 :string)

(cffi:defcvar ("RI_COMMENT" RI_COMMENT)
 :string)

(cffi:defcvar ("RI_STRUCTURE" RI_STRUCTURE)
 :string)

(cffi:defcvar ("RI_VERBATIM" RI_VERBATIM)
 :string)

(cffi:defcvar ("RI_IDENTIFIER" RI_IDENTIFIER)
 :string)

(cffi:defcvar ("RI_NAME" RI_NAME)
 :string)

(cffi:defcvar ("RI_SHADINGGROUP" RI_SHADINGGROUP)
 :string)

(cffi:defcvar ("RI_LINEAR" RI_LINEAR)
 :string)

(cffi:defcvar ("RI_CUBIC" RI_CUBIC)
 :string)

(cffi:defcvar ("RI_BUCKETSENDER" RI_BUCKETSENDER)
 :string)

(cffi:defcvar ("RI_FUNCTION" RI_FUNCTION)
 :string)

(cffi:defcvar ("RI_THRESHOLD" RI_THRESHOLD)
 :string)

(cffi:defcvar ("RI___THRESHOLD" RI___THRESHOLD)
 :string)

(cffi:defcvar ("RI_HANDLEID" RI_HANDLEID)
 :string)

(cffi:defcvar ("RI___HANDLEID" RI___HANDLEID)
 :string)

(cffi:defcvar ("RI_ASYNCHRONOUS_RENDER" RI_ASYNCHRONOUS_RENDER)
 :string)

(cffi:defcvar ("RI_FINISHRENDERING" RI_FINISHRENDERING)
 :string)

(cffi:defcvar ("RI_SUSPENDRENDERING" RI_SUSPENDRENDERING)
 :string)

(cffi:defcvar ("RI_STREAMMARKER" RI_STREAMMARKER)
 :string)

(cffi:defcvar ("RI_QUANTIZE" RI_QUANTIZE)
 :string)

(cffi:defcvar ("RI_DITHER" RI_DITHER)
 :string)

(cffi:defcvar ("RI_EXPOSURE" RI_EXPOSURE)
 :string)

(cffi:defcvar ("RI_FILTER" RI_FILTER)
 :string)

(cffi:defcvar ("RI_FILTERWIDTH" RI_FILTERWIDTH)
 :string)

(cffi:defcvar ("RiBezierBasis" RiBezierBasis)
 :pointer)

(cffi:defcvar ("RiBSplineBasis" RiBSplineBasis)
 :pointer)

(cffi:defcvar ("RiCatmullRomBasis" RiCatmullRomBasis)
 :pointer)

(cffi:defcvar ("RiHermiteBasis" RiHermiteBasis)
 :pointer)

(cffi:defcvar ("RiPowerBasis" RiPowerBasis)
 :pointer)

(cffi:defcvar ("RI_BEZIERSTEP" RI_BEZIERSTEP)
 :int)

(cffi:defcvar ("RI_BSPLINESTEP" RI_BSPLINESTEP)
 :int)

(cffi:defcvar ("RI_CATMULLROMSTEP" RI_CATMULLROMSTEP)
 :int)

(cffi:defcvar ("RI_HERMITESTEP" RI_HERMITESTEP)
 :int)

(cffi:defcvar ("RI_POWERSTEP" RI_POWERSTEP)
 :int)

(cffi:defcfun ("RiBegin" RiBegin) :void
  (name :string))

(cffi:defcfun ("RiEnd" RiEnd) :void)

(cffi:defcfun ("RiGetContext" RiGetContext) :pointer)

(cffi:defcfun ("RiContext" RiContext) :void
  (handle :pointer))

(cffi:defcfun ("RiFrameBegin" RiFrameBegin) :void
  (frame :int))

(cffi:defcfun ("RiFrameEnd" RiFrameEnd) :void)


(null-wrapped ("RiMotionBegin" RiMotionBegin) :void
              (n :int)
              &rest)

(cffi:defcfun ("RiMotionBeginV" RiMotionBeginV) :void
  (n :int)
  (times :pointer))

(cffi:defcfun ("RiMotionEnd" RiMotionEnd) :void)

(cffi:defcfun ("RiSolidBegin" RiSolidBegin) :void
  (operation :string))

(cffi:defcfun ("RiSolidEnd" RiSolidEnd) :void)

(cffi:defcfun ("RiWorldBegin" RiWorldBegin) :void)

(cffi:defcfun ("RiWorldEnd" RiWorldEnd) :void)

(cffi:defcfun ("RiObjectBegin" RiObjectBegin) :pointer)

(cffi:defcfun ("RiObjectBeginV" RiObjectBeginV) :pointer
  (n :int)
  (tokens :pointer)
  (params :pointer))

(cffi:defcfun ("RiObjectEnd" RiObjectEnd) :void)

(cffi:defcfun ("RiObjectInstance" RiObjectInstance) :void
  (handle :pointer))

(null-wrapped ("RiResource" RiResource) :void
  (handle :string)
  (type :string)
  &rest)



(cffi:defcfun ("RiResourceV" RiResourceV) :void
  (handle :string)
  (type :string)
  (n :int)
  (tokens :pointer)
  (params :pointer))

(cffi:defcfun ("RiResourceBegin" RiResourceBegin) :void)

(cffi:defcfun ("RiResourceEnd" RiResourceEnd) :void)

(cffi:defcfun ("RiFormat" RiFormat) :void
  (xres :int)
  (yres :int)
  (aspect :float))

(cffi:defcfun ("RiFrameAspectRatio" RiFrameAspectRatio) :void
  (aspect :float))

(cffi:defcfun ("RiScreenWindow" RiScreenWindow) :void
  (left :float)
  (right :float)
  (bottom :float)
  (top :float))

(cffi:defcfun ("RiClipping" RiClipping) :void
  (hither :float)
  (yon :float))

(cffi:defcfun ("RiClippingPlane" RiClippingPlane) :void
  (x :float)
  (y :float)
  (z :float)
  (nx :float)
  (ny :float)
  (nz :float))

(cffi:defcfun ("RiCropWindow" RiCropWindow) :void
  (xmin :float)
  (xmax :float)
  (ymin :float)
  (ymax :float))

(cffi:defcfun ("RiDepthOfField" RiDepthOfField) :void
  (fstop :float)
  (focallength :float)
  (focaldistance :float))

(null-wrapped ("RiProjection" RiProjection) :void
  (name :string)
  &rest)



(cffi:defcfun ("RiProjectionV" RiProjectionV) :void
  (name :string)
  (n :int)
  (tokens :pointer)
  (parms :pointer))

(cffi:defcfun ("RiShutter" RiShutter) :void
  (min :float)
  (max :float))

(null-wrapped ("RiCamera" RiCamera) :void
  (camera :string)
  &rest)



(cffi:defcfun ("RiCameraV" RiCameraV) :void
  (camera :string)
  (n :int)
  (tokens :pointer)
  (parms :pointer))

(null-wrapped ("RiDisplay" RiDisplay) :void
  (name :string)
  (type :string)
  (mode :string)
  &rest)



(cffi:defcfun ("RiDisplayV" RiDisplayV) :void
  (name :string)
  (type :string)
  (mode :string)
  (n :int)
  (tokens :pointer)
  (parms :pointer))

(null-wrapped ("RiDisplayChannel" RiDisplayChannel) :void
  (channel :string)
  &rest)



(cffi:defcfun ("RiDisplayChannelV" RiDisplayChannelV) :void
  (channel :string)
  (n :int)
  (tokens :pointer)
  (params :pointer))

(cffi:defcfun ("RiExposure" RiExposure) :void
  (gain :float)
  (gamma :float))

(null-wrapped ("RiImager" RiImager) :void
  (name :string)
  &rest)


(cffi:defcfun ("RiImagerV" RiImagerV) :void
  (name :string)
  (n :int)
  (tokens :pointer)
  (parms :pointer))

(cffi:defcfun ("RiPixelFilter" RiPixelFilter) :void
  (filterfunc :pointer)
  (xwidth :float)
  (ywidth :float))

(cffi:defcfun ("RiPixelSamples" RiPixelSamples) :void
  (xsamples :float)
  (ysamples :float))

(cffi:defcfun ("RiPixelVariance" RiPixelVariance) :void
  (variation :float))

(cffi:defcfun ("RiQuantize" RiQuantize) :void
  (type :string)
  (one :int)
  (min :int)
  (max :int)
  (ampl :float))

(cffi:defcfun ("RiConcatTransform" RiConcatTransform) :void
  (transform :pointer))

(cffi:defcfun ("RiCoordinateSystem" RiCoordinateSystem) :void
  (space :string))

(cffi:defcfun ("RiScopedCoordinateSystem" RiScopedCoordinateSystem) :void
  (space :string))

(cffi:defcfun ("RiCoordSysTransform" RiCoordSysTransform) :void
  (space :string))

(cffi:defcfun ("RiIdentity" RiIdentity) :void)

(cffi:defcfun ("RiPerspective" RiPerspective) :void
  (fov :float))

(cffi:defcfun ("RiRotate" RiRotate) :void
  (angle :float)
  (dx :float)
  (dy :float)
  (dz :float))

(cffi:defcfun ("RiScale" RiScale) :void
  (dx :float)
  (dy :float)
  (dz :float))

(cffi:defcfun ("RiSkew" RiSkew) :void
  (angle :float)
  (dx1 :float)
  (dy1 :float)
  (dz1 :float)
  (dx2 :float)
  (dy2 :float)
  (dz2 :float))

(cffi:defcfun ("RiTransform" RiTransform) :void
  (transform :pointer))

(cffi:defcfun ("RiTransformBegin" RiTransformBegin) :void)

(cffi:defcfun ("RiTransformEnd" RiTransformEnd) :void)

(cffi:defcfun ("RiTranslate" RiTranslate) :void
  (dx :float)
  (dy :float)
  (dz :float))

(cffi:defcfun ("RiTransformPoints" RiTransformPoints) :pointer
  (fromspace :string)
  (tospace :string)
  (n :int)
  (points :pointer))

(null-wrapped ("RiAtmosphere" RiAtmosphere) :void
  (name :string)
  &rest)


(cffi:defcfun ("RiAtmosphereV" RiAtmosphereV) :void
  (name :string)
  (n :int)
  (tokens :pointer)
  (parms :pointer))

(null-wrapped ("RiDeformation" RiDeformation) :void
  (name :string)
  &rest)


(cffi:defcfun ("RiDeformationV" RiDeformationV) :void
  (name :string)
  (n :int)
  (tokens :pointer)
  (parms :pointer))

(null-wrapped ("RiDisplacement" RiDisplacement) :void
  (name :string)
  &rest)


(cffi:defcfun ("RiDisplacementV" RiDisplacementV) :void
  (name :string)
  (n :int)
  (tokens :pointer)
  (parms :pointer))

(null-wrapped ("RiExterior" RiExterior) :void
  (name :string)
  &rest)


(cffi:defcfun ("RiExteriorV" RiExteriorV) :void
  (name :string)
  (n :int)
  (tokens :pointer)
  (parms :pointer))

(cffi:defcfun ("RiIlluminate" RiIlluminate) :void
  (light :pointer)
  (onoff :short))

(null-wrapped ("RiInterior" RiInterior) :void
  (name :string)
  &rest)


(cffi:defcfun ("RiInteriorV" RiInteriorV) :void
  (name :string)
  (n :int)
  (tokens :pointer)
  (parms :pointer))

(null-wrapped ("RiShader" RiShader) :void
  (name :string)
  (handle :string)
  &rest)


(cffi:defcfun ("RiShaderV" RiShaderV) :void
  (name :string)
  (handle :string)
  (n :int)
  (tokens :pointer)
  (parms :pointer))

(cffi:defcfun ("RiMatte" RiMatte) :void
  (onoff :short))

(cffi:defcfun ("RiMultiplyShadingRate" RiMultiplyShadingRate) :void
  (ratemultiplier :float))

(cffi:defcfun ("RiShadingRate" RiShadingRate) :void
  (size :float))

(cffi:defcfun ("RiShadingInterpolation" RiShadingInterpolation) :void
  (type :string))

(null-wrapped ("RiSurface" RiSurface) :void
  (name :string)
  &rest)


(cffi:defcfun ("RiSurfaceV" RiSurfaceV) :void
  (name :string)
  (n :int)
  (tokens :pointer)
  (parms :pointer))

(null-wrapped ("RiArchiveRecord" RiArchiveRecord) :void
  (type :string)
  (format :string)
  &rest)


(null-wrapped ("RiReadArchive" RiReadArchive) :void
  (name :string)
  (callback :pointer)
  &rest)


(cffi:defcfun ("RiReadArchiveV" RiReadArchiveV) :void
  (name :string)
  (callback :pointer)
  (n :int)
  (tokens :pointer)
  (parms :pointer))

(null-wrapped ("RiArchiveBegin" RiArchiveBegin) :pointer
  (archivename :string)
  &rest)


(cffi:defcfun ("RiArchiveBeginV" RiArchiveBeginV) :pointer
  (archivename :string)
  (n :int)
  (tokens :pointer)
  (params :pointer))

(cffi:defcfun ("RiArchiveEnd" RiArchiveEnd) :void)

(null-wrapped ("RiIfBegin" RiIfBegin) :void
  (expression :string)
  &rest)


(cffi:defcfun ("RiIfBeginV" RiIfBeginV) :void
  (expression :string)
  (n :int)
  (tokens :pointer)
  (params :pointer))

(null-wrapped ("RiElseIf" RiElseIf) :void
  (expression :string)
  &rest)


(cffi:defcfun ("RiElseIfV" RiElseIfV) :void
  (expression :string)
  (n :int)
  (tokens :pointer)
  (params :pointer))

(cffi:defcfun ("RiElse" RiElse) :void)

(cffi:defcfun ("RiIfEnd" RiIfEnd) :void)

(null-wrapped ("RiAttribute" RiAttribute) :void
  (name :string)
  &rest)


(cffi:defcfun ("RiAttributeV" RiAttributeV) :void
  (name :string)
  (n :int)
  (tokens :pointer)
  (parms :pointer))

(cffi:defcfun ("RiAttributeBegin" RiAttributeBegin) :void)

(cffi:defcfun ("RiAttributeEnd" RiAttributeEnd) :void)

(cffi:defcfun ("RiBound" RiBound) :void
  (bound :pointer))

(cffi:defcfun ("RiColor" RiColor) :void
  (color :pointer))

(cffi:defcfun ("RiOpacity" RiOpacity) :void
  (color :pointer))

(null-wrapped ("RiOption" RiOption) :void
  (name :string)
  &rest)


(cffi:defcfun ("RiOptionV" RiOptionV) :void
  (name :string)
  (n :int)
  (tokens :pointer)
  (parms :pointer))

(cffi:defcfun ("RiReverseOrientation" RiReverseOrientation) :void)

(cffi:defcfun ("RiTextureCoordinates" RiTextureCoordinates) :void
  (s1 :float)
  (t1 :float)
  (s2 :float)
  (t2 :float)
  (s3 :float)
  (t3 :float)
  (s4 :float)
  (t4 :float))

(cffi:defcfun ("RiSides" RiSides) :void
  (sides :int))

(cffi:defcfun ("RiDeclare" RiDeclare) :string
  (name :string)
  (declaration :string))

(null-wrapped ("RiLightSource" RiLightSource) :pointer
  (name :string)
  &rest)


(cffi:defcfun ("RiLightSourceV" RiLightSourceV) :pointer
  (name :string)
  (n :int)
  (tokens :pointer)
  (parms :pointer))

(null-wrapped ("RiAreaLightSource" RiAreaLightSource) :pointer
  (name :string)
  &rest)


(cffi:defcfun ("RiAreaLightSourceV" RiAreaLightSourceV) :pointer
  (name :string)
  (n :int)
  (tokens :pointer)
  (parms :pointer))

(cffi:defcfun ("RiBasis" RiBasis) :void
  (ubasis :pointer)
  (ustep :int)
  (vbasis :pointer)
  (vstep :int))

(null-wrapped ("RiPatch" RiPatch) :void
  (type :string)
  &rest)


(null-wrapped ("RiPatchMesh" RiPatchMesh) :void
  (type :string)
  (nu :int)
  (uwrap :string)
  (nv :int)
  (vwrap :string)
  &rest)


(cffi:defcfun ("RiPatchV" RiPatchV) :void
  (type :string)
  (n :int)
  (tokens :pointer)
  (parms :pointer))

(cffi:defcfun ("RiPatchMeshV" RiPatchMeshV) :void
  (type :string)
  (nu :int)
  (uwrap :string)
  (nv :int)
  (vwrap :string)
  (n :int)
  (tokens :pointer)
  (parms :pointer))

(null-wrapped ("RiPoints" RiPoints) :void
  (npoints :int)
  &rest)


(cffi:defcfun ("RiPointsV" RiPointsV) :void
  (npoints :int)
  (n :int)
  (tokens :pointer)
  (parms :pointer))

(null-wrapped ("RiCurves" RiCurves) :void
  (type :string)
  (ncurves :int)
  (nvertices :pointer)
  (wrap :string)
  &rest)


(cffi:defcfun ("RiCurvesV" RiCurvesV) :void
  (type :string)
  (ncurves :int)
  (nvertices :pointer)
  (wrap :string)
  (n :int)
  (tokens :pointer)
  (parms :pointer))

(null-wrapped ("RiNuCurves" RiNuCurves) :void
  (ncurves :int)
  (nvertices :pointer)
  (order :pointer)
  (knot :pointer)
  (min :pointer)
  (max :pointer)
  &rest)


(cffi:defcfun ("RiNuCurvesV" RiNuCurvesV) :void
  (ncurves :int)
  (nvertices :pointer)
  (order :pointer)
  (knot :pointer)
  (min :pointer)
  (max :pointer)
  (n :int)
  (tokens :pointer)
  (params :pointer))

(null-wrapped ("RiNuPatch" RiNuPatch) :void
  (nu :int)
  (uorder :int)
  (uknot :pointer)
  (umin :float)
  (umax :float)
  (nv :int)
  (vorder :int)
  (vknot :pointer)
  (vmin :float)
  (vmax :float)
  &rest)


(cffi:defcfun ("RiNuPatchV" RiNuPatchV) :void
  (nu :int)
  (uorder :int)
  (uknot :pointer)
  (umin :float)
  (umax :float)
  (nv :int)
  (vorder :int)
  (vknot :pointer)
  (vmin :float)
  (vmax :float)
  (n :int)
  (tokens :pointer)
  (parms :pointer))

(cffi:defcfun ("RiTrimCurve" RiTrimCurve) :void
  (nloops :int)
  (ncurves :pointer)
  (order :pointer)
  (knot :pointer)
  (min :pointer)
  (max :pointer)
  (n :pointer)
  (u :pointer)
  (v :pointer)
  (w :pointer))

(null-wrapped ("RiSubdivisionMesh" RiSubdivisionMesh) :void
  (scheme :string)
  (nfaces :int)
  (nvertices :pointer)
  (vertices :pointer)
  (ntags :int)
  (tags :pointer)
  (nargs :pointer)
  (intargs :pointer)
  (floatargs :pointer)
  &rest)


(cffi:defcfun ("RiSubdivisionMeshV" RiSubdivisionMeshV) :void
  (scheme :string)
  (nfaces :int)
  (nvertices :pointer)
  (vertices :pointer)
  (ntags :int)
  (tags :pointer)
  (nargs :pointer)
  (intargs :pointer)
  (floatargs :pointer)
  (n :int)
  (tokens :pointer)
  (parms :pointer))

(null-wrapped ("RiHierarchicalSubdivisionMesh" RiHierarchicalSubdivisionMesh) :void
  (scheme :string)
  (nfaces :int)
  (nvertices :pointer)
  (vertices :pointer)
  (ntags :int)
  (tags :pointer)
  (nargs :pointer)
  (intargs :pointer)
  (floatargs :pointer)
  (stringargs :pointer)
  &rest)


(cffi:defcfun ("RiHierarchicalSubdivisionMeshV" RiHierarchicalSubdivisionMeshV) :void
  (scheme :string)
  (nfaces :int)
  (nvertices :pointer)
  (vertices :pointer)
  (ntags :int)
  (tags :pointer)
  (nargs :pointer)
  (intargs :pointer)
  (floatargs :pointer)
  (stringargs :pointer)
  (n :int)
  (tokens :pointer)
  (params :pointer))

(null-wrapped ("RiCone" RiCone) :void
  (height :float)
  (radius :float)
  (thetamax :float)
  &rest)


(cffi:defcfun ("RiConeV" RiConeV) :void
  (height :float)
  (radius :float)
  (thetamax :float)
  (n :int)
  (tokens :pointer)
  (parms :pointer))

(null-wrapped ("RiCylinder" RiCylinder) :void
  (radius :float)
  (zmin :float)
  (zmax :float)
  (thetamax :float)
  &rest)


(cffi:defcfun ("RiCylinderV" RiCylinderV) :void
  (radius :float)
  (zmin :float)
  (zmax :float)
  (thetamax :float)
  (n :int)
  (tokens :pointer)
  (parms :pointer))

(null-wrapped ("RiDisk" RiDisk) :void
  (height :float)
  (radius :float)
  (thetamax :float)
  &rest)


(cffi:defcfun ("RiDiskV" RiDiskV) :void
  (height :float)
  (radius :float)
  (thetamax :float)
  (n :int)
  (tokens :pointer)
  (parms :pointer))

(null-wrapped ("RiHyperboloid" RiHyperboloid) :void
  (point1 :pointer)
  (point2 :pointer)
  (thetamax :float)
  &rest)


(cffi:defcfun ("RiHyperboloidV" RiHyperboloidV) :void
  (point1 :pointer)
  (point2 :pointer)
  (thetamax :float)
  (n :int)
  (tokens :pointer)
  (parms :pointer))

(null-wrapped ("RiParaboloid" RiParaboloid) :void
  (rmax :float)
  (zmin :float)
  (zmax :float)
  (thetamax :float)
  &rest)


(null-wrapped ("RiParaboloidV" RiParaboloidV) :void
  (rmax :float)
  (zmin :float)
  (zmax :float)
  (thetamax :float)
  (n :int)
  (tokens :pointer)
  (parms :pointer))

(null-wrapped ("RiSphere" RiSphere) :void
  (radius :float)
  (zmin :float)
  (zmax :float)
  (thetamax :float))

(cffi:defcfun ("RiSphereV" RiSphereV) :void
  (radius :float)
  (zmin :float)
  (zmax :float)
  (thetamax :float)
  (n :int)
  (tokens :pointer)
  (parms :pointer))

(null-wrapped ("RiTorus" RiTorus) :void
  (majorradius :float)
  (minorradius :float)
  (phimin :float)
  (phimax :float)
  (thetamax :float)
  &rest)


(cffi:defcfun ("RiTorusV" RiTorusV) :void
  (majorradius :float)
  (minorradius :float)
  (phimin :float)
  (phimax :float)
  (thetamax :float)
  (n :int)
  (tokens :pointer)
  (parms :pointer))

(null-wrapped ("RiGeneralPolygon" RiGeneralPolygon) :void
  (nloops :int)
  (nvertices :pointer)
  &rest)


(cffi:defcfun ("RiGeneralPolygonV" RiGeneralPolygonV) :void
  (nloops :int)
  (nvertices :pointer)
  (n :int)
  (tokens :pointer)
  (parms :pointer))

(null-wrapped ("RiBlobby" RiBlobby) :void
  (nleaf :int)
  (nentry :int)
  (entry :pointer)
  (nfloat :int)
  (floats :pointer)
  (nstring :int)
  (strings :pointer)
  &rest)


(cffi:defcfun ("RiBlobbyV" RiBlobbyV) :void
  (nleaf :int)
  (nentry :int)
  (entry :pointer)
  (nfloat :int)
  (floats :pointer)
  (nstring :int)
  (strings :pointer)
  (n :int)
  (tokens :pointer)
  (parms :pointer))

(null-wrapped ("RiPointsGeneralPolygons" RiPointsGeneralPolygons) :void
  (npolys :int)
  (nloops :pointer)
  (nvertices :pointer)
  (vertices :pointer)
  &rest)


(cffi:defcfun ("RiPointsGeneralPolygonsV" RiPointsGeneralPolygonsV) :void
  (npolys :int)
  (nloops :pointer)
  (nvertices :pointer)
  (vertices :pointer)
  (n :int)
  (tokens :pointer)
  (parms :pointer))

(null-wrapped ("RiPointsPolygons" RiPointsPolygons) :void
  (npolys :int)
  (nvertices :pointer)
  (vertices :pointer)
  &rest)


(cffi:defcfun ("RiPointsPolygonsV" RiPointsPolygonsV) :void
  (npolys :int)
  (nvertices :pointer)
  (vertices :pointer)
  (n :int)
  (tokens :pointer)
  (parms :pointer))

(null-wrapped ("RiPolygon" RiPolygon) :void
  (nvertices :int)
  &rest)


(cffi:defcfun ("RiPolygonV" RiPolygonV) :void
  (nvertices :int)
  (n :int)
  (tokens :pointer)
  (parms :pointer))

(cffi:defcfun ("RiColorSamples" RiColorSamples) :void
  (n :int)
  (nRGB :pointer)
  (RGBn :pointer))

(null-wrapped ("RiHider" RiHider) :void
  (type :string)
  &rest)


(cffi:defcfun ("RiHiderV" RiHiderV) :void
  (type :string)
  (n :int)
  (tokens :pointer)
  (parms :pointer))

(cffi:defcfun ("RiDetail" RiDetail) :void
  (bound :pointer))

(cffi:defcfun ("RiDetailRange" RiDetailRange) :void
  (minvisible :float)
  (lowertransition :float)
  (uppertransition :float)
  (maxvisible :float))

(cffi:defcfun ("RiGeometricApproximation" RiGeometricApproximation) :void
  (type :string)
  (value :float))

(null-wrapped ("RiGeometry" RiGeometry) :void
  (type :string)
  &rest)


(cffi:defcfun ("RiGeometryV" RiGeometryV) :void
  (type :string)
  (n :int)
  (tokens :pointer)
  (parms :pointer))

(cffi:defcfun ("RiOrientation" RiOrientation) :void
  (orientation :string))

(cffi:defcfun ("RiProcedural" RiProcedural) :void
  (i_data :pointer)
  (i_bound :pointer)
  (i_Subdivfunc :pointer)
  (i_Freefunc :pointer))

(cffi:defcfun ("RiProceduralV" RiProceduralV) :void
  (i_data :pointer)
  (i_bound :pointer)
  (i_Subdivfunc :pointer)
  (i_Freefunc :pointer)
  (n :int)
  (tokens :pointer)
  (params :pointer))

(cffi:defcfun ("RiRelativeDetail" RiRelativeDetail) :void
  (relativedetail :float))

(cffi:defcfun ("RiProcDelayedReadArchive" RiProcDelayedReadArchive) :void
  (data :pointer)
  (detail :float))

(cffi:defcfun ("RiProcDynamicLoad" RiProcDynamicLoad) :void
  (data :pointer)
  (detail :float))

(cffi:defcfun ("RiProcRunProgram" RiProcRunProgram) :void
  (data :pointer)
  (detail :float))

(cffi:defcfun ("RiProcFree" RiProcFree) :void
  (data :pointer))

(null-wrapped ("RiMakeBump" RiMakeBump) :void
  (picturename :string)
  (texturename :string)
  (swrap :string)
  (twrap :string)
  (filterfunc :pointer)
  (swidth :float)
  (twidth :float)
  &rest)


(cffi:defcfun ("RiMakeBumpV" RiMakeBumpV) :void
  (picturename :string)
  (texturename :string)
  (swrap :string)
  (twrap :string)
  (filterfunc :pointer)
  (swidth :float)
  (twidth :float)
  (n :int)
  (tokens :pointer)
  (parms :pointer))

(null-wrapped ("RiMakeCubeFaceEnvironment" RiMakeCubeFaceEnvironment) :void
  (px :string)
  (nx :string)
  (py :string)
  (ny :string)
  (pz :string)
  (nz :string)
  (texturename :string)
  (fov :float)
  (filterfunc :pointer)
  (swidth :float)
  (twidth :float)
  &rest)


(cffi:defcfun ("RiMakeCubeFaceEnvironmentV" RiMakeCubeFaceEnvironmentV) :void
  (px :string)
  (nx :string)
  (py :string)
  (ny :string)
  (pz :string)
  (nz :string)
  (texturename :string)
  (fov :float)
  (filterfunc :pointer)
  (swidth :float)
  (twidth :float)
  (n :int)
  (tokens :pointer)
  (parms :pointer))

(null-wrapped ("RiMakeLatLongEnvironment" RiMakeLatLongEnvironment) :void
  (picturename :string)
  (texturename :string)
  (filterfunc :pointer)
  (swidth :float)
  (twidth :float)
  &rest)


(cffi:defcfun ("RiMakeLatLongEnvironmentV" RiMakeLatLongEnvironmentV) :void
  (picturename :string)
  (texturename :string)
  (filterfunc :pointer)
  (swidth :float)
  (twidth :float)
  (n :int)
  (tokens :pointer)
  (parms :pointer))

(null-wrapped ("RiMakeShadow" RiMakeShadow) :void
  (picturename :string)
  (texturename :string)
  &rest)


(cffi:defcfun ("RiMakeShadowV" RiMakeShadowV) :void
  (picturename :string)
  (texturename :string)
  (n :int)
  (tokens :pointer)
  (parms :pointer))

(null-wrapped ("RiMakeTexture" RiMakeTexture) :void
  (picturename :string)
  (texturename :string)
  (swrap :string)
  (twrap :string)
  (filterfunc :pointer)
  (swidth :float)
  (twidth :float)
  &rest)


(cffi:defcfun ("RiMakeTextureV" RiMakeTextureV) :void
  (picturename :string)
  (texturename :string)
  (swrap :string)
  (twrap :string)
  (filterfunc :pointer)
  (swidth :float)
  (twidth :float)
  (n :int)
  (tokens :pointer)
  (parms :pointer))

(null-wrapped ("RiMakeBrickMap" RiMakeBrickMap) :void
  (nptc :int)
  (ptcnames :pointer)
  (bkmname :string)
  &rest)


(cffi:defcfun ("RiMakeBrickMapV" RiMakeBrickMapV) :void
  (nptc :int)
  (ptcnames :pointer)
  (bkmname :string)
  (n :int)
  (tokens :pointer)
  (params :pointer))

(cffi:defcfun ("RiBoxFilter" RiBoxFilter) :float
  (x :float)
  (y :float)
  (xwidth :float)
  (ywidth :float))

(cffi:defcfun ("RiTriangleFilter" RiTriangleFilter) :float
  (x :float)
  (y :float)
  (xwidth :float)
  (ywidth :float))

(cffi:defcfun ("RiCatmullRomFilter" RiCatmullRomFilter) :float
  (x :float)
  (y :float)
  (xwidth :float)
  (ywidth :float))

(cffi:defcfun ("RiSeparableCatmullRomFilter" RiSeparableCatmullRomFilter) :float
  (x :float)
  (y :float)
  (xwidth :float)
  (ywidth :float))

(cffi:defcfun ("RiBesselFilter" RiBesselFilter) :float
  (x :float)
  (y :float)
  (xwidth :float)
  (ywidth :float))

(cffi:defcfun ("RiGaussianFilter" RiGaussianFilter) :float
  (x :float)
  (y :float)
  (xwidth :float)
  (ywidth :float))

(cffi:defcfun ("RiSincFilter" RiSincFilter) :float
  (x :float)
  (y :float)
  (xwidth :float)
  (ywidth :float))

(cffi:defcfun ("RiBlackmanHarrisFilter" RiBlackmanHarrisFilter) :float
  (i_x :float)
  (i_y :float)
  (i_filterXWidth :float)
  (i_filteryWidth :float))

(cffi:defcfun ("RiMitchellFilter" RiMitchellFilter) :float
  (i_x :float)
  (i_y :float)
  (i_filterXWidth :float)
  (i_filteryWidth :float))

(cffi:defcfun ("RiDiskFilter" RiDiskFilter) :float
  (i_x :float)
  (i_y :float)
  (i_filterXWidth :float)
  (i_filteryWidth :float))

(cffi:defcfun ("RiErrorHandler" RiErrorHandler) :void
  (handler :pointer))

(cffi:defcfun ("RiErrorIgnore" RiErrorIgnore) :void
  (code :int)
  (severity :int)
  (msg :string))

(cffi:defcfun ("RiErrorPrint" RiErrorPrint) :void
  (code :int)
  (severity :int)
  (msg :string))

(cffi:defcfun ("RiErrorAbort" RiErrorAbort) :void
  (code :int)
  (severity :int)
  (msg :string))

(cffi:defcfun ("RiSynchronize" RiSynchronize) :void
  (arg0 :string))

(null-wrapped ("RiEditBegin" RiEditBegin) :void
  (name :string)
  &rest)

(cffi:defcfun ("RiEditBeginV" RiEditBeginV) :void
  (name :string)
  (n :int)
  (tokens :pointer)
  (params :pointer))

(cffi:defcfun ("RiEditEnd" RiEditEnd) :void)

(null-wrapped ("RiEditWorldBegin" RiEditWorldBegin) :void
  (name :string)
  &rest)

(cffi:defcfun ("RiEditWorldBeginV" RiEditWorldBeginV) :void
  (name :string)
  (n :int)
  (tokens :pointer)
  (params :pointer))

(cffi:defcfun ("RiEditWorldEnd" RiEditWorldEnd) :void)


(cffi:define-foreign-library lib3delight
    (t (:default "lib3delight"))) ;; note no .so suffix here
(cffi:use-foreign-library lib3delight)
